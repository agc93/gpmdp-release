@page "/releases"

@using GPMDP.Release.Data
@inject CircleCIService CircleCIService
@inject ITimerService TimerService

<Styled @bind-Classname="@Styles.MaxWidth">
    max-width: 85%;
    position: relative;
</Styled>
<Styled @bind-Classname="@Styles.AlignBottom">
    position: absolute;
    bottom: 1em;
</Styled>
<Styled @bind-Classname="@Styles.IconFloat">
    float: right;
    margin-right: 1.25em;
</Styled>

<h1>Release Finder</h1>

<p>This app will help with finding URLs of the latest GPMDP release since CircleCI is confusing and GPMDP hasn't released anything in 18 months.</p>

@if (!ready)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@buildReq" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <MatDivider></MatDivider>
<div class="mat-layout-grid mat-layout-grid-align-left @Styles.MaxWidth">
    <div class="mat-layout-grid-inner">
        @* <div class="form-group"> *@
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                <MatSelect Label="Pick your OS" @bind-Value="_platform" OnInput="@OnPlatformInput" Style="width:85%;">
                    <MatOptionString></MatOptionString>
                    <MatOptionString Value="windows">Windows</MatOptionString>
                    <MatOptionString Value="macos">macOS</MatOptionString>
                    <MatOptionString Value="linux">Linux</MatOptionString>
                </MatSelect>
            </div>
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                @if (_platform != null && availablePackages != null && availablePackages.Any()) {
                    <MatSelect Disabled="@(availablePackages.Count == 1)" Label="Package Format" @bind-Value="_package" OnInput="@OnFormatInput" Style="width:85%;">
                        <MatOptionString></MatOptionString>
                        @foreach (var package in availablePackages) {
                            <MatOptionString Value="@package">@package</MatOptionString>
                        }
                    </MatSelect>
                }
            </div>
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                @if (_platform != null && _package != null) {
                    <MatSelect Disabled="@(availableArchitectures.Count == 1)" Label="Architecture" @bind-Value="_arch" Style="width:85%;">
                        <MatOptionString></MatOptionString>
                        @foreach (var arch in availableArchitectures) {
                            <MatOptionString Value="@arch">@arch</MatOptionString>
                        }
                    </MatSelect>
                }
            </div>
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                @* <div class="mat-layout-grid-inner"> *@
                    <mat-layout-grid-cell><MatButton Icon="search" Raised="true" type="submit" Disabled="@(_platform.IsEmpty() || _package.IsEmpty() || _arch.IsEmpty())">Find Build</MatButton></mat-layout-grid-cell>
                @* </div> *@
            </div>
        @* </div> *@
    </div>
</div>
<MatDivider></MatDivider>
</EditForm>
}

@if (!string.IsNullOrWhiteSpace(buildLink)) {
    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <MatDivider></MatDivider>
                <p id="sigText" class="card-text">@artifactLink</p>
                <MatFAB class="@Styles.IconFloat" Icon="@MatIconNames.Flip_to_front" Label="Copy" style="float: right; margin-right: 1.25em;"></MatFAB>
            </div>
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <MatDivider></MatDivider>
                <p id="buildLink" class="card-text">@buildLink</p>
            </div>
        </div>
    </div>
}

@code {

    private (string MaxWidth, string IconFloat, string AlignBottom) Styles;
    private string artifactLink {get;set;}
    private string buildLink {get;set;}
    private string _platform {get;set;}
    private string _package;
    private string _arch;
    private bool ready {get;set;} = false;
    private List<string> availablePackages {get;set;} = new List<string>();
        private List<string> availableArchitectures {get;set;} = new List<string>();

        private BuildRequest buildReq = new BuildRequest();

    protected override async Task OnInitializedAsync()
    {
        TimerService.OnTimerFinished = () => OnUpdatePlatform(this._platform);
        ready = true;
    }

    async void OnUpdatePlatform(string platform)

    {
        List<string> GetPackagesForPlatform(string platform) {
            switch (platform.ToLower()) {
                case "linux":
                    return new List<string> {"rpm", "deb"};
                case "windows":
                    return new List<string> {"exe"};
                case "macos":
                    return new List<string> {"zip"};
                default:
                    return null;
            }
        }
        availablePackages = OnUpdateOptions(ref _package, platform ?? this._platform, GetPackagesForPlatform);
        OnUpdatePackage(_package);
        /*
        var packages = GetPackagesForPlatform(platform ?? this._platform);
        
        if (packages == null) return;
        if (packages.Count == 1) {
            _package = packages[0];
        } else {
            _package = null;
        }
        availablePackages = packages;
        */
    }

    List<string> OnUpdateOptions(ref string key, string newValue, Func<string, IEnumerable<string>> valueFunc) {
        key = null;
        var options = valueFunc.Invoke(newValue);
        if (options == null) return null;
        if (options.Count() == 1) {
            key = options.First();
        } else {
            key = null;
        }
        return options.ToList();
    }

    void OnUpdatePackage(string package) {
        string[] GetArchitectures(string package) {
            if (package.IsEmpty()) return null;
            switch (package.ToLower())
            {
                case "rpm":
                case "deb":
                    return new[] {"x86", "x64"};
                case "exe":
                    return new[] { "win32" };
                default:
                case "zip":
                    return new[] {"x86_64"};
            }}
        availableArchitectures = OnUpdateOptions(ref _arch, package ?? this._package, GetArchitectures) ?? new List<string>();
        //var archOptions = GetArchitectures(package ?? this._package);
    }

    private async void HandleValidSubmit()
    {
        Console.WriteLine($"Requesting for {_platform}/{_package}/{_arch}");
        var build = await CircleCIService.GetLatestArtifact(null);
        Console.WriteLine(build.buildUrl);
    }

    void OnPlatformInput(ChangeEventArgs e)
    {
        OnUpdatePlatform(e.Value.ToString() ?? this._platform);
    }

    void OnFormatInput(ChangeEventArgs e) {
        OnUpdatePackage(e.Value.ToString() ?? this._package);
    }
}
